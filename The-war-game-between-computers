

######### First I imported random library and created 3 global list variables contains suits ranks and values


import random

suits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')
ranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')
values = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 
            'Nine':9, 'Ten':10, 'Jack':11, 'Queen':12, 'King':13, 'Ace':14}



# In the Card class, I created a class which gets together lists and makes a card. I added value incase of str errors.
class Card():
    
    def __init__(self,suit,rank):
        self.suit = suit
        self.rank = rank
        self.value = values[rank]
        
    def __str__(self):
        return self.rank + " Of " + self.suit


# In the Deck class, I aimed to create a deck of card, shuffling it and get one of them( We will see why we are getting after classes)
class Deck():
    
    def __init__(self):
        self.all_cards = []
        
        for suit in suits:
            for rank in ranks:
                created_card = Card(suit,rank)
                self.all_cards.append(created_card)
                
                
                
                
                
    def shuffle(self):
        
        random.shuffle(self.all_cards)
        

        
    def deal_one(self):
        return self.all_cards.pop()


# I created player for define each player and how will they give and add cards on their hand.
class Player():
    
    def __init__(self,name):
        self.name = name
        self.all_cards = []
        
        
    # I added pop("""0""") because I wanted to get on the top of their deck otherwise ıt enter unexepted for loops at war
    def remove_one(self):
        
        return self.all_cards.pop(0)
        
        
    # This class function is more complicated because in war stiation players might get more than one card and It may cause a nested list.
        
    def add_cards(self,new_cards):
        
        if type(new_cards) == type([]):
            
            self.all_cards.extend(new_cards)
        else:
            self.all_cards.append(new_cards)
            
    def __str__(self):
        return f"Player {self.name} has {len(self.all_cards)} cards."
    
# Game Setup 

# Creating a deck of card
new_deck= Deck()

# Shuffle it
new_deck.shuffle()

# Defining Players
player_one = Player("One")
player_two = Player("Two")

# Split shuffled deck from users 
for x in range(26):
    player_one.add_cards(new_deck.deal_one())
    player_two.add_cards(new_deck.deal_one())
    
game_on = True

# Round count

round_num = 0

while game_on:
    
    round_num += 1
    print(f"Round {round_num}")
    
    
    # I added wincheck first to check each round ıf someone won or lost
    if len(player_one.all_cards) == 0:
        print("Player One, out of cards! Player Two Wins!")
        game_on = False
        break
    if len(player_two.all_cards) == 0:
        print("Player Two, out of cards! Player One Wins!")
        game_on = False
        break  
    
    
    # Start A new Round
    
    # It is cards on the table
    player_one_cards = []
    player_one_cards.append(player_one.remove_one())
    
    player_two_cards = []
    player_two_cards.append(player_two.remove_one())
    
    at_war = True
    # At the war section
    while at_war:
        
        # We defined value in previous code for that
        if player_one_cards[-1].value > player_two_cards[-1].value:
            
            player_one.add_cards(player_one_cards)
            player_one.add_cards(player_two_cards)
            at_war = False
        elif player_one_cards[-1].value < player_two_cards[-1].value:
            
            player_two.add_cards(player_one_cards)
            player_two.add_cards(player_two_cards)
            at_war = False
        
        # If each player has same value, They need to add a new card from their hand, else function does that
        
        else:
            print("WAR")
            
            # They are adding 5 cards from their hand ıf they dont have 5 cards they cant go into war and lose the game
            
            if len(player_one.all_cards) < 5:
                print("Player One lost")
                game_on = False
                break
            elif len(player_one.all_cards) < 5:
                print("Player Two lost")
                game_on = False
                break
            else:
            
                 for x in range(5):
                 player_one_cards.append(player_one.remove_one())
                 player_two_cards.append(player_two.remove_one())

                    
